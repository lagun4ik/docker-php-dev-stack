server {
        listen 443 deferred http2 ssl;
        listen [::]:443 deferred http2 ssl ipv6only=on;
        server_name site;

        root /var/www/site;
        index index.php index.html;
        charset utf-8;

        pagespeed RewriteLevel CoreFilters;
        pagespeed LoadFromFile "http://site/" "/var/www/site";

        #pagespeed EnableFilters insert_dns_prefetch,responsive_images,combine_heads,outline_css,outline_javascript,move_css_above_scripts,move_css_to_head,rewrite_style_attributes,prioritize_critical_css,remove_comments,collapse_whitespace,elide_attributes,sprite_images;
        #pagespeed DisableFilters ...

        # public key, contains your public key and class 1 certificate, to create:
        # (exapmle for startssl)
        # $ cat site.com.pem sub.class1.server.ca.pem > /etc/nginx/ssl/site.pem
        ssl_certificate /etc/nginx/ssl/site.pem;

        # private key (decoded), decode encoded with RSA key with command:
        # $ openssl rsa -in decoded.key -out site.key
        ssl_certificate_key /etc/nginx/ssl/site.key;

        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
        # to generate your dhparam.pem file, run in the terminal:
        # $ openssl dhparam -out /etc/nginx/dhparam.pem 2048
        ssl_dhparam /etc/nginx/dhparam.pem;

        # don't forget to set secure rights to these files:
        # $ chmod 400 /etc/nginx/ssl/*

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # ciphers based on https://wiki.mozilla.org/Security/Server_Side_TLS
        ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
        ssl_prefer_server_ciphers on;

        resolver 8.8.8.8;
        ssl_stapling on;

        # wget -O ca.pem https://www.startssl.com/certs/ca.pem
        ssl_trusted_certificate /etc/nginx/ssl/ca.pem;

        #don't send the nginx version number in error pages and Server header
        server_tokens off;

        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers

        # enabling HSTS(HTTP Strict Transport Security)
        # https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
        add_header Strict-Transport-Security max-age=31536000 always;

        # config to don't allow the browser to render the page inside an frame or
        # iframe and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        # if you need to allow [i]frames, you can use SAMEORIGIN
        # or set an uri with ALLOW-FROM uri
        add_header X-Frame-Options DENY;

        # when serving user-supplied content, include a
        # X-Content-Type-Options: nosniff header along with the Content-Type:
        # header to disable content-type sniffing on some browsers.
        # https://github.com/blog/1482-heads-up-nosniff-header-support-coming-to-chrome-and-firefox
        add_header X-Content-Type-Options nosniff;

        # this header enables the Cross-site scripting (XSS) filter, it's usually
        # enabled by default anyway, so the role of this header is to re-enable
        # the filter for this particular website if it was disabled by the user.
        add_header X-XSS-Protection "1; mode=block";

        location / {
                try_files $uri $uri/ =404;
        }

        #location / {
        #    try_files $uri $uri/ /index.php$args;
        #}

        #location ~ \.php$ {
        #    fastcgi_index index.php;
        #    fastcgi_split_path_info ^(.+\.php)(/.*)$;
        #    fastcgi_pass php-fpm;
        #    include /etc/nginx/fastcgi_params;
        #    fastcgi_param  SCRIPT_FILENAME  $realpath_root$fastcgi_script_name;
        #    fastcgi_param DOCUMENT_ROOT $realpath_root;
        #    fastcgi_param HTTPS on;
        #}

        # deny access to files, starting with dot (hidden) or ending with ~ (temp)

        location ^~ /.well-known/acme-challenge/ {
          default_type 'text/plain';
          root /var/www/site;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
                root /usr/share/nginx/html;
         }

        location ~ /\. {
                access_log off;
                log_not_found off;
                deny all;
        }

        location ~ ~$ {
                access_log off;
                log_not_found off;
                deny all;
        }

        # block of rules for static content

        location ~ /(favicon.ico|favicon.png|robots.txt)$ {
                access_log off;
                log_not_found off;
                expires 1y;
                add_header Cache-Control public,max-age=259200;
        }

        location ~*  \.(jpg|jpeg|png|gif|ico|css|js|mp3)$ {
                expires max;
                log_not_found off;
                add_header Cache-Control public,max-age=259200;
        }

}

server {
        # catch all unsecure requests (both IPv4 and IPv6)
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        # this means site, *.site
        server_name .site;

        # permanently redirect client to https version of the site
        return 301 https://site;
}
